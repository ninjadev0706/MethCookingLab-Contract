{
  "address": "0x0159Ac349A62Bb8B350ed8b0D98488Cf221344F6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_ido",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_arb",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_swapRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_swapRate1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_purchaseCap",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchaseCap",
          "type": "uint256"
        }
      ],
      "name": "PurchaseCapChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Purchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapRate1",
          "type": "uint256"
        }
      ],
      "name": "SwapRate1Changed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapRate",
          "type": "uint256"
        }
      ],
      "name": "SwapRateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Swept",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "arb",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimedAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ido",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "participants",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchaseCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "token_amount",
          "type": "uint256"
        }
      ],
      "name": "purchaseWithToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "purchasedARBAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "purchasedAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "purchasedETHAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "purchasedStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "setEndTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_purchaseCap",
          "type": "uint256"
        }
      ],
      "name": "setPurchaseCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "setStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_swapRate",
          "type": "uint256"
        }
      ],
      "name": "setSwapRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_swapRate1",
          "type": "uint256"
        }
      ],
      "name": "setSwapRate1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRate1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPurchasedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddr",
          "type": "address"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x62c8dae34fb221d811ac09fdb0750ea3c68a5b3729af3eefb29f0dcb130cc2fb",
  "receipt": {
    "to": null,
    "from": "0xB574e46e8e7De6fd0DA7CD9eCb3E38C67D5a4cE0",
    "contractAddress": "0x0159Ac349A62Bb8B350ed8b0D98488Cf221344F6",
    "transactionIndex": 0,
    "gasUsed": "1713281",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000001000000000040000000000000000000000000020000000000000000001800000000000000000000000000000000400000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa6a82a836625005eb3e100c08e900a3f601d53232c439995946a8a51e53bb664",
    "transactionHash": "0x62c8dae34fb221d811ac09fdb0750ea3c68a5b3729af3eefb29f0dcb130cc2fb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 28435764,
        "transactionHash": "0x62c8dae34fb221d811ac09fdb0750ea3c68a5b3729af3eefb29f0dcb130cc2fb",
        "address": "0x0159Ac349A62Bb8B350ed8b0D98488Cf221344F6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b574e46e8e7de6fd0da7cd9ecb3e38c67d5a4ce0"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa6a82a836625005eb3e100c08e900a3f601d53232c439995946a8a51e53bb664"
      }
    ],
    "blockNumber": 28435764,
    "cumulativeGasUsed": "1713281",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x28cb21bd49351699C0414CF18BEE720BC64CcB7c",
    "0xCfEF4B3F7B2a606a0Ed5c2C2C933973B224baa4a",
    6666700,
    5155,
    "333340000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "3b0647037e82dad11880d098eb908d61",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_ido\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_arb\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swapRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapRate1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_purchaseCap\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseCap\",\"type\":\"uint256\"}],\"name\":\"PurchaseCapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapRate1\",\"type\":\"uint256\"}],\"name\":\"SwapRate1Changed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapRate\",\"type\":\"uint256\"}],\"name\":\"SwapRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Swept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"arb\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ido\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"}],\"name\":\"purchaseWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchasedARBAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchasedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchasedETHAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchasedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseCap\",\"type\":\"uint256\"}],\"name\":\"setPurchaseCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapRate\",\"type\":\"uint256\"}],\"name\":\"setSwapRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapRate1\",\"type\":\"uint256\"}],\"name\":\"setSwapRate1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRate1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPurchasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(uint256)\":{\"details\":\"Users claim purchased tokens after token sale ended\"},\"depositTokens(uint256)\":{\"details\":\"Deposit IDO token to the sale contract\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pause the sale\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"purchase()\":{\"details\":\"Purchase IDO token users can purchase within `purchcaseCap` amount\"},\"purchaseWithToken(uint256)\":{\"details\":\"Purchase IDO token with other token users can purchase within `purchcaseCap` amount\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setEndTime(uint256)\":{\"details\":\"Set purchase cap for each user\"},\"setPurchaseCap(uint256)\":{\"details\":\"Set purchase cap for each user\"},\"setStartTime(uint256)\":{\"details\":\"Set purchase cap for each user\"},\"setSwapRate(uint256)\":{\"details\":\"Set ido token price in purchaseToken\"},\"setSwapRate1(uint256)\":{\"details\":\"Set arb token price in purchaseToken\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpause the sale\"},\"withdraw()\":{\"details\":\"`Operator` sweeps `purchaseToken` from the sale contract to `to` address\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Users can purchase tokens after sale started and claim after sale ended\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IDOSale.sol\":\"IDOSale\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/IDOSale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/**\\r\\n * Users can purchase tokens after sale started and claim after sale ended\\r\\n */\\r\\n\\r\\ncontract IDOSale is Pausable, ReentrancyGuard, Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // user address => purchased token amount\\r\\n    mapping(address => uint256) public purchasedAmounts;\\r\\n    // user address => purchased eth amount\\r\\n    mapping(address => uint256) public purchasedETHAmounts;\\r\\n    // user address => purchased arb amount\\r\\n    mapping(address => uint256) public purchasedARBAmounts;\\r\\n    // user address => claimed token amount\\r\\n    mapping(address => uint256) public claimedAmounts;\\r\\n    // participants addresses\\r\\n    mapping(address => bool) public purchasedStatus;\\r\\n    // IDO token price\\r\\n    uint256 public swapRate;\\r\\n    uint256 public swapRate1;\\r\\n    // IDO token address\\r\\n    IERC20 public ido;\\r\\n    // ARB token address\\r\\n    IERC20 public arb;\\r\\n    // The cap amount each user can purchase IDO up to\\r\\n    uint256 public purchaseCap;\\r\\n    // The total purchased amount\\r\\n    uint256 public totalPurchasedAmount;\\r\\n\\r\\n    // Date timestamp when token sale start\\r\\n    uint256 public startTime;\\r\\n    // Date timestamp when token sale ends\\r\\n    uint256 public endTime;\\r\\n    // number of participants\\r\\n    uint256 public participants;\\r\\n\\r\\n    // Used for returning purchase history\\r\\n    struct Purchase {\\r\\n        address account;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    event SwapRateChanged(uint256 swapRate);\\r\\n    event SwapRate1Changed(uint256 swapRate1);\\r\\n    event PurchaseCapChanged(uint256 purchaseCap);\\r\\n    event Deposited(address indexed sender, uint256 amount);\\r\\n    event Purchased(address indexed sender, uint256 amount);\\r\\n    event Claimed(address indexed sender, uint256 amount);\\r\\n    event Swept(address indexed sender, uint256 amount);\\r\\n\\r\\n    constructor(\\r\\n        IERC20 _ido,\\r\\n        IERC20 _arb,\\r\\n        uint256 _swapRate,\\r\\n        uint256 _swapRate1,\\r\\n        uint256 _purchaseCap\\r\\n    ) {\\r\\n        require(address(_ido) != address(0), \\\"IDOSale: IDO_ADDRESS_INVALID\\\");\\r\\n        require(address(_arb) != address(0), \\\"IDOSale: ARB_ADDRESS_INVALID\\\");\\r\\n        require(_swapRate > 0, \\\"IDOSale: TOKEN_PRICE_INVALID\\\");\\r\\n        require(_swapRate1 > 0, \\\"IDOSale: TOKEN_PRICE_INVALID\\\");\\r\\n        require(_purchaseCap > 0, \\\"IDOSale: PURCHASE_CAP_INVALID\\\");\\r\\n\\r\\n        ido = _ido;\\r\\n        arb = _arb;\\r\\n        swapRate = _swapRate;\\r\\n        swapRate1 = _swapRate1;\\r\\n        purchaseCap = _purchaseCap;\\r\\n    }\\r\\n\\r\\n    /**************************|\\r\\n    |          Setters         |\\r\\n    |_________________________*/\\r\\n\\r\\n    /**\\r\\n     * @dev Set ido token price in purchaseToken\\r\\n     */\\r\\n    function setSwapRate(uint256 _swapRate) external onlyOwner {\\r\\n        swapRate = _swapRate;\\r\\n\\r\\n        emit SwapRateChanged(_swapRate);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set arb token price in purchaseToken\\r\\n     */\\r\\n    function setSwapRate1(uint256 _swapRate1) external onlyOwner {\\r\\n        swapRate1 = _swapRate1;\\r\\n\\r\\n        emit SwapRate1Changed(_swapRate1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set purchase cap for each user\\r\\n     */\\r\\n    function setPurchaseCap(uint256 _purchaseCap) external onlyOwner {\\r\\n        purchaseCap = _purchaseCap;\\r\\n\\r\\n        emit PurchaseCapChanged(_purchaseCap);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set purchase cap for each user\\r\\n     */\\r\\n    function setStartTime(uint256 _startTime) external onlyOwner {\\r\\n        startTime = _startTime;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set purchase cap for each user\\r\\n     */\\r\\n    function setEndTime(uint256 _endTime) external onlyOwner {\\r\\n        endTime = _endTime;\\r\\n    }\\r\\n\\r\\n    /***************************|\\r\\n    |          Pausable         |\\r\\n    |__________________________*/\\r\\n\\r\\n    /**\\r\\n     * @dev Pause the sale\\r\\n     */\\r\\n    function pause() external onlyOwner {\\r\\n        super._pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Unpause the sale\\r\\n     */\\r\\n    function unpause() external onlyOwner {\\r\\n        super._unpause();\\r\\n    }\\r\\n\\r\\n\\r\\n    /***************************|\\r\\n    |          Purchase         |\\r\\n    |__________________________*/\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit IDO token to the sale contract\\r\\n     */\\r\\n    function depositTokens(uint256 amount) external onlyOwner whenNotPaused {\\r\\n        require(amount > 0, \\\"IDOSale: DEPOSIT_AMOUNT_INVALID\\\");\\r\\n        ido.safeTransferFrom(_msgSender(), address(this), amount);\\r\\n\\r\\n        emit Deposited(_msgSender(), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Purchase IDO token\\r\\n     * users can purchase within `purchcaseCap` amount\\r\\n     */\\r\\n    function purchase() external nonReentrant whenNotPaused payable {\\r\\n        require(startTime <= block.timestamp, \\\"IDOSale: SALE_NOT_STARTED\\\");\\r\\n        require(block.timestamp < endTime, \\\"IDOSale: SALE_ALREADY_ENDED\\\");\\r\\n        require(msg.value > 0, \\\"IDOSale: PURCHASE_AMOUNT_INVALID\\\");\\r\\n\\r\\n        require(purchasedAmounts[_msgSender()] + msg.value * swapRate / 100 <= purchaseCap, \\\"IDOSale: PURCHASE_CAP_EXCEEDED\\\");\\r\\n        uint256 idoBalance = ido.balanceOf(address(this));\\r\\n        require(totalPurchasedAmount + msg.value * swapRate / 100 <= idoBalance, \\\"IDOSale: INSUFFICIENT_SELL_BALANCE\\\");\\r\\n\\r\\n        purchasedAmounts[_msgSender()] += msg.value * swapRate / 100;\\r\\n        purchasedETHAmounts[_msgSender()] += msg.value;\\r\\n        totalPurchasedAmount += msg.value * swapRate / 100;\\r\\n\\r\\n        if(!purchasedStatus[_msgSender()]) {\\r\\n            purchasedStatus[_msgSender()] = true;\\r\\n            participants++;\\r\\n        }\\r\\n\\r\\n        emit Purchased(_msgSender(), msg.value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Purchase IDO token with other token\\r\\n     * users can purchase within `purchcaseCap` amount\\r\\n     */\\r\\n    function purchaseWithToken(uint token_amount) external nonReentrant whenNotPaused {\\r\\n        require(startTime <= block.timestamp, \\\"IDOSale: SALE_NOT_STARTED\\\");\\r\\n        require(block.timestamp < endTime, \\\"IDOSale: SALE_ALREADY_ENDED\\\");\\r\\n        require(token_amount > 0, \\\"IDOSale: PURCHASE_AMOUNT_INVALID\\\");\\r\\n        require(purchasedAmounts[_msgSender()] + token_amount * swapRate1 / 100 <= purchaseCap, \\\"IDOSale: PURCHASE_CAP_EXCEEDED\\\");\\r\\n        uint256 idoBalance = ido.balanceOf(address(this));\\r\\n        require(totalPurchasedAmount + token_amount * swapRate1 / 100 <= idoBalance, \\\"IDOSale: INSUFFICIENT_SELL_BALANCE\\\");\\r\\n\\r\\n        arb.transferFrom(msg.sender, address(this), token_amount); \\r\\n\\r\\n        purchasedAmounts[_msgSender()] += token_amount * swapRate1 / 100;\\r\\n        purchasedARBAmounts[_msgSender()] += token_amount;\\r\\n        totalPurchasedAmount += token_amount * swapRate1 / 100;\\r\\n    \\r\\n        if(!purchasedStatus[_msgSender()]) {\\r\\n            purchasedStatus[_msgSender()] = true;\\r\\n            participants++;\\r\\n        }\\r\\n\\r\\n        emit Purchased(_msgSender(), token_amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    /************************|\\r\\n    |          Claim         |\\r\\n    |_______________________*/\\r\\n\\r\\n    /**\\r\\n     * @dev Users claim purchased tokens after token sale ended\\r\\n     */\\r\\n    function claim(uint256 amount) external nonReentrant whenNotPaused {\\r\\n        require(endTime <= block.timestamp, \\\"IDOSale: SALE_NOT_ENDED\\\");\\r\\n        require(amount > 0, \\\"IDOSale: CLAIM_AMOUNT_INVALID\\\");\\r\\n        require(claimedAmounts[_msgSender()] + amount <= purchasedAmounts[_msgSender()], \\\"IDOSale: CLAIM_AMOUNT_EXCEEDED\\\");\\r\\n\\r\\n        claimedAmounts[_msgSender()] += amount;\\r\\n        ido.safeTransfer(_msgSender(), amount);\\r\\n\\r\\n        emit Claimed(_msgSender(), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev `Operator` sweeps `purchaseToken` from the sale contract to `to` address\\r\\n     */\\r\\n    function withdraw() external onlyOwner {\\r\\n        // =============================================================================\\r\\n\\r\\n        // This will payout the owner 100% of the contract balance.\\r\\n        // Do not remove this otherwise you will not be able to withdraw the funds.\\r\\n        // =============================================================================\\r\\n        (bool os, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(os);\\r\\n        // =============================================================================\\r\\n    }\\r\\n\\r\\n    function withdrawToken(address _tokenAddr) external onlyOwner {\\r\\n\\r\\n        require(IERC20(_tokenAddr).balanceOf(address(this)) > 0, \\\"Sufficient Token balance\\\");\\r\\n        \\r\\n        IERC20(_tokenAddr).transfer(msg.sender, IERC20(_tokenAddr).balanceOf(address(this)));\\r\\n    }\\r\\n}\",\"keccak256\":\"0x2149730bf1bd3895f2d0e828c8da11405e023be698b3fb53ca4810d5902fc436\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001e3f38038062001e3f8339810160408190526200003491620002a8565b6000805460ff19169055600180556200004d3362000239565b6001600160a01b038516620000a95760405162461bcd60e51b815260206004820152601c60248201527f49444f53616c653a2049444f5f414444524553535f494e56414c49440000000060448201526064015b60405180910390fd5b6001600160a01b038416620001015760405162461bcd60e51b815260206004820152601c60248201527f49444f53616c653a204152425f414444524553535f494e56414c4944000000006044820152606401620000a0565b60008311620001535760405162461bcd60e51b815260206004820152601c60248201527f49444f53616c653a20544f4b454e5f50524943455f494e56414c4944000000006044820152606401620000a0565b60008211620001a55760405162461bcd60e51b815260206004820152601c60248201527f49444f53616c653a20544f4b454e5f50524943455f494e56414c4944000000006044820152606401620000a0565b60008111620001f75760405162461bcd60e51b815260206004820152601d60248201527f49444f53616c653a2050555243484153455f4341505f494e56414c49440000006044820152606401620000a0565b600a80546001600160a01b039687166001600160a01b031991821617909155600b805495909616941693909317909355600855600991909155600c55620002fb565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516001600160a01b0381168114620002a357600080fd5b919050565b600080600080600060a08688031215620002c157600080fd5b620002cc866200028b565b9450620002dc602087016200028b565b6040870151606088015160809098015196999198509695945092505050565b611b34806200030b6000396000f3fe6080604052600436106101d85760003560e01c80638947606911610102578063bedac10011610095578063eeb522aa11610064578063eeb522aa14610515578063f2fde38b14610535578063f4cde46914610555578063fe07d1d51461057557600080fd5b8063bedac100146104a9578063ccb98ffc146104bf578063cd114d81146104df578063dd49756e146104f557600080fd5b8063aa13917e116100d1578063aa13917e14610426578063ab0fe87414610453578063acb5fedf14610469578063b60338521461048957600080fd5b806389476069146103845780638da5cb5b146103a45780639695ca4e146103d657806398f06972146103f657600080fd5b80635c975abb1161017a57806371417b321161014957806371417b3214610317578063715018a61461034457806378e97925146103595780638456cb591461036f57600080fd5b80635c975abb146102bf57806364edfbf0146102e3578063698518e5146102eb5780636c4470fb1461030157600080fd5b80633ccfd60b116101b65780633ccfd60b146102485780633e0a322d1461025d5780633f4ba83a1461027d578063449b1f111461029257600080fd5b80633197cbb6146101dd578063379607f5146102065780633931c9a814610228575b600080fd5b3480156101e957600080fd5b506101f3600f5481565b6040519081526020015b60405180910390f35b34801561021257600080fd5b50610226610221366004611985565b6105a2565b005b34801561023457600080fd5b50610226610243366004611985565b610795565b34801561025457600080fd5b50610226610bec565b34801561026957600080fd5b50610226610278366004611985565b610c4c565b34801561028957600080fd5b50610226610c59565b34801561029e57600080fd5b506101f36102ad36600461199e565b60046020526000908152604090205481565b3480156102cb57600080fd5b5060005460ff165b60405190151581526020016101fd565b610226610c6b565b3480156102f757600080fd5b506101f360085481565b34801561030d57600080fd5b506101f360105481565b34801561032357600080fd5b506101f361033236600461199e565b60066020526000908152604090205481565b34801561035057600080fd5b5061022661103b565b34801561036557600080fd5b506101f3600e5481565b34801561037b57600080fd5b5061022661104d565b34801561039057600080fd5b5061022661039f36600461199e565b61105d565b3480156103b057600080fd5b506002546001600160a01b03165b6040516001600160a01b0390911681526020016101fd565b3480156103e257600080fd5b506102266103f1366004611985565b61121a565b34801561040257600080fd5b506102d361041136600461199e565b60076020526000908152604090205460ff1681565b34801561043257600080fd5b506101f361044136600461199e565b60056020526000908152604090205481565b34801561045f57600080fd5b506101f3600c5481565b34801561047557600080fd5b50600b546103be906001600160a01b031681565b34801561049557600080fd5b506102266104a4366004611985565b61125e565b3480156104b557600080fd5b506101f3600d5481565b3480156104cb57600080fd5b506102266104da366004611985565b61129b565b3480156104eb57600080fd5b506101f360095481565b34801561050157600080fd5b50610226610510366004611985565b6112a8565b34801561052157600080fd5b50600a546103be906001600160a01b031681565b34801561054157600080fd5b5061022661055036600461199e565b611358565b34801561056157600080fd5b50610226610570366004611985565b6113e5565b34801561058157600080fd5b506101f361059036600461199e565b60036020526000908152604090205481565b6002600154036105f95760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600155610606611422565b42600f5411156106585760405162461bcd60e51b815260206004820152601760248201527f49444f53616c653a2053414c455f4e4f545f454e44454400000000000000000060448201526064016105f0565b600081116106a85760405162461bcd60e51b815260206004820152601d60248201527f49444f53616c653a20434c41494d5f414d4f554e545f494e56414c494400000060448201526064016105f0565b336000908152600360209081526040808320546006909252909120546106cf9083906119dd565b111561071d5760405162461bcd60e51b815260206004820152601e60248201527f49444f53616c653a20434c41494d5f414d4f554e545f4558434545444544000060448201526064016105f0565b336000908152600660205260408120805483929061073c9084906119dd565b9091555050600a54610758906001600160a01b03163383611475565b60405181815233907fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a906020015b60405180910390a25060018055565b6002600154036107e75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105f0565b60026001556107f4611422565b42600e5411156108465760405162461bcd60e51b815260206004820152601960248201527f49444f53616c653a2053414c455f4e4f545f535441525445440000000000000060448201526064016105f0565b600f5442106108975760405162461bcd60e51b815260206004820152601b60248201527f49444f53616c653a2053414c455f414c52454144595f454e444544000000000060448201526064016105f0565b600081116108e75760405162461bcd60e51b815260206004820181905260248201527f49444f53616c653a2050555243484153455f414d4f554e545f494e56414c494460448201526064016105f0565b600c546064600954836108fa91906119f6565b6109049190611a15565b3360009081526003602052604090205461091e91906119dd565b111561096c5760405162461bcd60e51b815260206004820152601e60248201527f49444f53616c653a2050555243484153455f4341505f4558434545444544000060448201526064016105f0565b600a546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156109b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d99190611a37565b9050806064600954846109ec91906119f6565b6109f69190611a15565b600d54610a0391906119dd565b1115610a5c5760405162461bcd60e51b815260206004820152602260248201527f49444f53616c653a20494e53554646494349454e545f53454c4c5f42414c414e604482015261434560f01b60648201526084016105f0565b600b546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610ab3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad79190611a50565b50606460095483610ae891906119f6565b610af29190611a15565b3360009081526003602052604081208054909190610b119084906119dd565b90915550503360009081526005602052604081208054849290610b359084906119dd565b9091555050600954606490610b4a90846119f6565b610b549190611a15565b600d6000828254610b6591906119dd565b90915550503360009081526007602052604090205460ff16610baf57336000908152600760205260408120805460ff191660011790556010805491610ba983611a72565b91905055505b60405182815233907fa512fb2532ca8587f236380171326ebb69670e86a2ba0c4412a3fcca4c3ada9b9060200160405180910390a2505060018055565b610bf4611523565b604051600090339047908381818185875af1925050503d8060008114610c36576040519150601f19603f3d011682016040523d82523d6000602084013e610c3b565b606091505b5050905080610c4957600080fd5b50565b610c54611523565b600e55565b610c61611523565b610c6961157d565b565b600260015403610cbd5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105f0565b6002600155610cca611422565b42600e541115610d1c5760405162461bcd60e51b815260206004820152601960248201527f49444f53616c653a2053414c455f4e4f545f535441525445440000000000000060448201526064016105f0565b600f544210610d6d5760405162461bcd60e51b815260206004820152601b60248201527f49444f53616c653a2053414c455f414c52454144595f454e444544000000000060448201526064016105f0565b60003411610dbd5760405162461bcd60e51b815260206004820181905260248201527f49444f53616c653a2050555243484153455f414d4f554e545f494e56414c494460448201526064016105f0565b600c54606460085434610dd091906119f6565b610dda9190611a15565b33600090815260036020526040902054610df491906119dd565b1115610e425760405162461bcd60e51b815260206004820152601e60248201527f49444f53616c653a2050555243484153455f4341505f4558434545444544000060448201526064016105f0565b600a546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610e8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaf9190611a37565b905080606460085434610ec291906119f6565b610ecc9190611a15565b600d54610ed991906119dd565b1115610f325760405162461bcd60e51b815260206004820152602260248201527f49444f53616c653a20494e53554646494349454e545f53454c4c5f42414c414e604482015261434560f01b60648201526084016105f0565b606460085434610f4291906119f6565b610f4c9190611a15565b3360009081526003602052604081208054909190610f6b9084906119dd565b90915550503360009081526004602052604081208054349290610f8f9084906119dd565b9091555050600854606490610fa490346119f6565b610fae9190611a15565b600d6000828254610fbf91906119dd565b90915550503360009081526007602052604090205460ff1661100957336000908152600760205260408120805460ff19166001179055601080549161100383611a72565b91905055505b60405134815233907fa512fb2532ca8587f236380171326ebb69670e86a2ba0c4412a3fcca4c3ada9b90602001610786565b611043611523565b610c6960006115cf565b611055611523565b610c69611639565b611065611523565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156110ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d09190611a37565b1161111d5760405162461bcd60e51b815260206004820152601860248201527f53756666696369656e7420546f6b656e2062616c616e6365000000000000000060448201526064016105f0565b6040516370a0823160e01b81523060048201526001600160a01b0382169063a9059cbb90339083906370a0823190602401602060405180830381865afa15801561116b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118f9190611a37565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156111f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112169190611a50565b5050565b611222611523565b60098190556040518181527f474e14fe0127542680b5247ee46a9d7fabbeba8c16671c949d1963df5b094db0906020015b60405180910390a150565b611266611523565b600c8190556040518181527f23eb383159943d100968a603a73e7002356a9a2e41de1f638a137c58b9282fe690602001611253565b6112a3611523565b600f55565b6112b0611523565b6112b8611422565b600081116113085760405162461bcd60e51b815260206004820152601f60248201527f49444f53616c653a204445504f5349545f414d4f554e545f494e56414c49440060448201526064016105f0565b61132033600a546001600160a01b0316903084611676565b60405181815233907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c49060200160405180910390a250565b611360611523565b6001600160a01b0381166113dc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016105f0565b610c49816115cf565b6113ed611523565b60088190556040518181527fa6cd94206ba0776de155f0ff3b504a43dfde42c5dafb62f1d10828342c7241b090602001611253565b60005460ff1615610c695760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016105f0565b6040516001600160a01b03831660248201526044810182905261151e9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526116b4565b505050565b6002546001600160a01b03163314610c695760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105f0565b611585611799565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600280546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611641611422565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115b23390565b6040516001600160a01b03808516602483015283166044820152606481018290526116ae9085906323b872dd60e01b906084016114ba565b50505050565b6000611709826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117eb9092919063ffffffff16565b80519091501561151e57808060200190518101906117279190611a50565b61151e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016105f0565b60005460ff16610c695760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016105f0565b60606117fa8484600085611804565b90505b9392505050565b60608247101561187c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016105f0565b6001600160a01b0385163b6118d35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105f0565b600080866001600160a01b031685876040516118ef9190611aaf565b60006040518083038185875af1925050503d806000811461192c576040519150601f19603f3d011682016040523d82523d6000602084013e611931565b606091505b509150915061194182828661194c565b979650505050505050565b6060831561195b5750816117fd565b82511561196b5782518084602001fd5b8160405162461bcd60e51b81526004016105f09190611acb565b60006020828403121561199757600080fd5b5035919050565b6000602082840312156119b057600080fd5b81356001600160a01b03811681146117fd57600080fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156119f0576119f06119c7565b92915050565b6000816000190483118215151615611a1057611a106119c7565b500290565b600082611a3257634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611a4957600080fd5b5051919050565b600060208284031215611a6257600080fd5b815180151581146117fd57600080fd5b600060018201611a8457611a846119c7565b5060010190565b60005b83811015611aa6578181015183820152602001611a8e565b50506000910152565b60008251611ac1818460208701611a8b565b9190910192915050565b6020815260008251806020840152611aea816040850160208701611a8b565b601f01601f1916919091016040019291505056fea26469706673582212205c6189b4ccf312c8ff5870d9652d288858dacffa876a7450dd09a133805f240664736f6c63430008100033",
  "deployedBytecode": "0x6080604052600436106101d85760003560e01c80638947606911610102578063bedac10011610095578063eeb522aa11610064578063eeb522aa14610515578063f2fde38b14610535578063f4cde46914610555578063fe07d1d51461057557600080fd5b8063bedac100146104a9578063ccb98ffc146104bf578063cd114d81146104df578063dd49756e146104f557600080fd5b8063aa13917e116100d1578063aa13917e14610426578063ab0fe87414610453578063acb5fedf14610469578063b60338521461048957600080fd5b806389476069146103845780638da5cb5b146103a45780639695ca4e146103d657806398f06972146103f657600080fd5b80635c975abb1161017a57806371417b321161014957806371417b3214610317578063715018a61461034457806378e97925146103595780638456cb591461036f57600080fd5b80635c975abb146102bf57806364edfbf0146102e3578063698518e5146102eb5780636c4470fb1461030157600080fd5b80633ccfd60b116101b65780633ccfd60b146102485780633e0a322d1461025d5780633f4ba83a1461027d578063449b1f111461029257600080fd5b80633197cbb6146101dd578063379607f5146102065780633931c9a814610228575b600080fd5b3480156101e957600080fd5b506101f3600f5481565b6040519081526020015b60405180910390f35b34801561021257600080fd5b50610226610221366004611985565b6105a2565b005b34801561023457600080fd5b50610226610243366004611985565b610795565b34801561025457600080fd5b50610226610bec565b34801561026957600080fd5b50610226610278366004611985565b610c4c565b34801561028957600080fd5b50610226610c59565b34801561029e57600080fd5b506101f36102ad36600461199e565b60046020526000908152604090205481565b3480156102cb57600080fd5b5060005460ff165b60405190151581526020016101fd565b610226610c6b565b3480156102f757600080fd5b506101f360085481565b34801561030d57600080fd5b506101f360105481565b34801561032357600080fd5b506101f361033236600461199e565b60066020526000908152604090205481565b34801561035057600080fd5b5061022661103b565b34801561036557600080fd5b506101f3600e5481565b34801561037b57600080fd5b5061022661104d565b34801561039057600080fd5b5061022661039f36600461199e565b61105d565b3480156103b057600080fd5b506002546001600160a01b03165b6040516001600160a01b0390911681526020016101fd565b3480156103e257600080fd5b506102266103f1366004611985565b61121a565b34801561040257600080fd5b506102d361041136600461199e565b60076020526000908152604090205460ff1681565b34801561043257600080fd5b506101f361044136600461199e565b60056020526000908152604090205481565b34801561045f57600080fd5b506101f3600c5481565b34801561047557600080fd5b50600b546103be906001600160a01b031681565b34801561049557600080fd5b506102266104a4366004611985565b61125e565b3480156104b557600080fd5b506101f3600d5481565b3480156104cb57600080fd5b506102266104da366004611985565b61129b565b3480156104eb57600080fd5b506101f360095481565b34801561050157600080fd5b50610226610510366004611985565b6112a8565b34801561052157600080fd5b50600a546103be906001600160a01b031681565b34801561054157600080fd5b5061022661055036600461199e565b611358565b34801561056157600080fd5b50610226610570366004611985565b6113e5565b34801561058157600080fd5b506101f361059036600461199e565b60036020526000908152604090205481565b6002600154036105f95760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600155610606611422565b42600f5411156106585760405162461bcd60e51b815260206004820152601760248201527f49444f53616c653a2053414c455f4e4f545f454e44454400000000000000000060448201526064016105f0565b600081116106a85760405162461bcd60e51b815260206004820152601d60248201527f49444f53616c653a20434c41494d5f414d4f554e545f494e56414c494400000060448201526064016105f0565b336000908152600360209081526040808320546006909252909120546106cf9083906119dd565b111561071d5760405162461bcd60e51b815260206004820152601e60248201527f49444f53616c653a20434c41494d5f414d4f554e545f4558434545444544000060448201526064016105f0565b336000908152600660205260408120805483929061073c9084906119dd565b9091555050600a54610758906001600160a01b03163383611475565b60405181815233907fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a906020015b60405180910390a25060018055565b6002600154036107e75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105f0565b60026001556107f4611422565b42600e5411156108465760405162461bcd60e51b815260206004820152601960248201527f49444f53616c653a2053414c455f4e4f545f535441525445440000000000000060448201526064016105f0565b600f5442106108975760405162461bcd60e51b815260206004820152601b60248201527f49444f53616c653a2053414c455f414c52454144595f454e444544000000000060448201526064016105f0565b600081116108e75760405162461bcd60e51b815260206004820181905260248201527f49444f53616c653a2050555243484153455f414d4f554e545f494e56414c494460448201526064016105f0565b600c546064600954836108fa91906119f6565b6109049190611a15565b3360009081526003602052604090205461091e91906119dd565b111561096c5760405162461bcd60e51b815260206004820152601e60248201527f49444f53616c653a2050555243484153455f4341505f4558434545444544000060448201526064016105f0565b600a546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156109b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d99190611a37565b9050806064600954846109ec91906119f6565b6109f69190611a15565b600d54610a0391906119dd565b1115610a5c5760405162461bcd60e51b815260206004820152602260248201527f49444f53616c653a20494e53554646494349454e545f53454c4c5f42414c414e604482015261434560f01b60648201526084016105f0565b600b546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610ab3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad79190611a50565b50606460095483610ae891906119f6565b610af29190611a15565b3360009081526003602052604081208054909190610b119084906119dd565b90915550503360009081526005602052604081208054849290610b359084906119dd565b9091555050600954606490610b4a90846119f6565b610b549190611a15565b600d6000828254610b6591906119dd565b90915550503360009081526007602052604090205460ff16610baf57336000908152600760205260408120805460ff191660011790556010805491610ba983611a72565b91905055505b60405182815233907fa512fb2532ca8587f236380171326ebb69670e86a2ba0c4412a3fcca4c3ada9b9060200160405180910390a2505060018055565b610bf4611523565b604051600090339047908381818185875af1925050503d8060008114610c36576040519150601f19603f3d011682016040523d82523d6000602084013e610c3b565b606091505b5050905080610c4957600080fd5b50565b610c54611523565b600e55565b610c61611523565b610c6961157d565b565b600260015403610cbd5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105f0565b6002600155610cca611422565b42600e541115610d1c5760405162461bcd60e51b815260206004820152601960248201527f49444f53616c653a2053414c455f4e4f545f535441525445440000000000000060448201526064016105f0565b600f544210610d6d5760405162461bcd60e51b815260206004820152601b60248201527f49444f53616c653a2053414c455f414c52454144595f454e444544000000000060448201526064016105f0565b60003411610dbd5760405162461bcd60e51b815260206004820181905260248201527f49444f53616c653a2050555243484153455f414d4f554e545f494e56414c494460448201526064016105f0565b600c54606460085434610dd091906119f6565b610dda9190611a15565b33600090815260036020526040902054610df491906119dd565b1115610e425760405162461bcd60e51b815260206004820152601e60248201527f49444f53616c653a2050555243484153455f4341505f4558434545444544000060448201526064016105f0565b600a546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610e8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaf9190611a37565b905080606460085434610ec291906119f6565b610ecc9190611a15565b600d54610ed991906119dd565b1115610f325760405162461bcd60e51b815260206004820152602260248201527f49444f53616c653a20494e53554646494349454e545f53454c4c5f42414c414e604482015261434560f01b60648201526084016105f0565b606460085434610f4291906119f6565b610f4c9190611a15565b3360009081526003602052604081208054909190610f6b9084906119dd565b90915550503360009081526004602052604081208054349290610f8f9084906119dd565b9091555050600854606490610fa490346119f6565b610fae9190611a15565b600d6000828254610fbf91906119dd565b90915550503360009081526007602052604090205460ff1661100957336000908152600760205260408120805460ff19166001179055601080549161100383611a72565b91905055505b60405134815233907fa512fb2532ca8587f236380171326ebb69670e86a2ba0c4412a3fcca4c3ada9b90602001610786565b611043611523565b610c6960006115cf565b611055611523565b610c69611639565b611065611523565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156110ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d09190611a37565b1161111d5760405162461bcd60e51b815260206004820152601860248201527f53756666696369656e7420546f6b656e2062616c616e6365000000000000000060448201526064016105f0565b6040516370a0823160e01b81523060048201526001600160a01b0382169063a9059cbb90339083906370a0823190602401602060405180830381865afa15801561116b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118f9190611a37565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156111f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112169190611a50565b5050565b611222611523565b60098190556040518181527f474e14fe0127542680b5247ee46a9d7fabbeba8c16671c949d1963df5b094db0906020015b60405180910390a150565b611266611523565b600c8190556040518181527f23eb383159943d100968a603a73e7002356a9a2e41de1f638a137c58b9282fe690602001611253565b6112a3611523565b600f55565b6112b0611523565b6112b8611422565b600081116113085760405162461bcd60e51b815260206004820152601f60248201527f49444f53616c653a204445504f5349545f414d4f554e545f494e56414c49440060448201526064016105f0565b61132033600a546001600160a01b0316903084611676565b60405181815233907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c49060200160405180910390a250565b611360611523565b6001600160a01b0381166113dc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016105f0565b610c49816115cf565b6113ed611523565b60088190556040518181527fa6cd94206ba0776de155f0ff3b504a43dfde42c5dafb62f1d10828342c7241b090602001611253565b60005460ff1615610c695760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016105f0565b6040516001600160a01b03831660248201526044810182905261151e9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526116b4565b505050565b6002546001600160a01b03163314610c695760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105f0565b611585611799565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600280546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611641611422565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115b23390565b6040516001600160a01b03808516602483015283166044820152606481018290526116ae9085906323b872dd60e01b906084016114ba565b50505050565b6000611709826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117eb9092919063ffffffff16565b80519091501561151e57808060200190518101906117279190611a50565b61151e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016105f0565b60005460ff16610c695760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016105f0565b60606117fa8484600085611804565b90505b9392505050565b60608247101561187c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016105f0565b6001600160a01b0385163b6118d35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105f0565b600080866001600160a01b031685876040516118ef9190611aaf565b60006040518083038185875af1925050503d806000811461192c576040519150601f19603f3d011682016040523d82523d6000602084013e611931565b606091505b509150915061194182828661194c565b979650505050505050565b6060831561195b5750816117fd565b82511561196b5782518084602001fd5b8160405162461bcd60e51b81526004016105f09190611acb565b60006020828403121561199757600080fd5b5035919050565b6000602082840312156119b057600080fd5b81356001600160a01b03811681146117fd57600080fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156119f0576119f06119c7565b92915050565b6000816000190483118215151615611a1057611a106119c7565b500290565b600082611a3257634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611a4957600080fd5b5051919050565b600060208284031215611a6257600080fd5b815180151581146117fd57600080fd5b600060018201611a8457611a846119c7565b5060010190565b60005b83811015611aa6578181015183820152602001611a8e565b50506000910152565b60008251611ac1818460208701611a8b565b9190910192915050565b6020815260008251806020840152611aea816040850160208701611a8b565b601f01601f1916919091016040019291505056fea26469706673582212205c6189b4ccf312c8ff5870d9652d288858dacffa876a7450dd09a133805f240664736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(uint256)": {
        "details": "Users claim purchased tokens after token sale ended"
      },
      "depositTokens(uint256)": {
        "details": "Deposit IDO token to the sale contract"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pause the sale"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "purchase()": {
        "details": "Purchase IDO token users can purchase within `purchcaseCap` amount"
      },
      "purchaseWithToken(uint256)": {
        "details": "Purchase IDO token with other token users can purchase within `purchcaseCap` amount"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setEndTime(uint256)": {
        "details": "Set purchase cap for each user"
      },
      "setPurchaseCap(uint256)": {
        "details": "Set purchase cap for each user"
      },
      "setStartTime(uint256)": {
        "details": "Set purchase cap for each user"
      },
      "setSwapRate(uint256)": {
        "details": "Set ido token price in purchaseToken"
      },
      "setSwapRate1(uint256)": {
        "details": "Set arb token price in purchaseToken"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpause the sale"
      },
      "withdraw()": {
        "details": "`Operator` sweeps `purchaseToken` from the sale contract to `to` address"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Users can purchase tokens after sale started and claim after sale ended",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 133,
        "contract": "contracts/IDOSale.sol:IDOSale",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 234,
        "contract": "contracts/IDOSale.sol:IDOSale",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/IDOSale.sol:IDOSale",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2701,
        "contract": "contracts/IDOSale.sol:IDOSale",
        "label": "purchasedAmounts",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2705,
        "contract": "contracts/IDOSale.sol:IDOSale",
        "label": "purchasedETHAmounts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2709,
        "contract": "contracts/IDOSale.sol:IDOSale",
        "label": "purchasedARBAmounts",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2713,
        "contract": "contracts/IDOSale.sol:IDOSale",
        "label": "claimedAmounts",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2717,
        "contract": "contracts/IDOSale.sol:IDOSale",
        "label": "purchasedStatus",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2719,
        "contract": "contracts/IDOSale.sol:IDOSale",
        "label": "swapRate",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2721,
        "contract": "contracts/IDOSale.sol:IDOSale",
        "label": "swapRate1",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2724,
        "contract": "contracts/IDOSale.sol:IDOSale",
        "label": "ido",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)341"
      },
      {
        "astId": 2727,
        "contract": "contracts/IDOSale.sol:IDOSale",
        "label": "arb",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IERC20)341"
      },
      {
        "astId": 2729,
        "contract": "contracts/IDOSale.sol:IDOSale",
        "label": "purchaseCap",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2731,
        "contract": "contracts/IDOSale.sol:IDOSale",
        "label": "totalPurchasedAmount",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2733,
        "contract": "contracts/IDOSale.sol:IDOSale",
        "label": "startTime",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2735,
        "contract": "contracts/IDOSale.sol:IDOSale",
        "label": "endTime",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2737,
        "contract": "contracts/IDOSale.sol:IDOSale",
        "label": "participants",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)341": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}