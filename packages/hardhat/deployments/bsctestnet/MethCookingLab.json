{
  "address": "0x0F76C5CD4C438FaD1041cec787c8ff876Ed504eF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wETHAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddr",
          "type": "address"
        }
      ],
      "name": "emergencyRewardWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxStakerCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minStakingDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumShillCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "setEndTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxStakerCount",
          "type": "uint256"
        }
      ],
      "name": "setMaxStakerCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minStakingDuration",
          "type": "uint256"
        }
      ],
      "name": "setMinStakingDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "shill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakerAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "shilled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wETH",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x83f03a7acdb763d8a305a7b734ccc7a9b7719539757e1d5cbf2165f00d369a2f",
  "receipt": {
    "to": null,
    "from": "0x435fD2F39B097F58AaEFD561648DF282d39654bB",
    "contractAddress": "0x0F76C5CD4C438FaD1041cec787c8ff876Ed504eF",
    "transactionIndex": 1,
    "gasUsed": "1226306",
    "logsBloom": "0x
    "blockHash": "0xfab27bcf540a22827fbdbccc5c83e3dc1344d1adad1d0c8fe4b055e5ccd37431",
    "transactionHash": "0x83f03a7acdb763d8a305a7b734ccc7a9b7719539757e1d5cbf2165f00d369a2f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 32354792,
        "transactionHash": "0x83f03a7acdb763d8a305a7b734ccc7a9b7719539757e1d5cbf2165f00d369a2f",
        "address": "0x0F76C5CD4C438FaD1041cec787c8ff876Ed504eF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000435fd2f39b097f58aaefd561648df282d39654bb"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xfab27bcf540a22827fbdbccc5c83e3dc1344d1adad1d0c8fe4b055e5ccd37431"
      }
    ],
    "blockNumber": 32354792,
    "cumulativeGasUsed": "1561972",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xeA5B8D6012b8A7E20CDa20b7b3b986775D8f0E70",
    "0xa440318a56993eD8f09fbAaDbD82f999D3E2C499"
  ],
  "numDeployments": 1,
  "solcInputHash": "73a6760707872172d61b083c4e606fb8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wETHAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"emergencyRewardWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumShillCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxStakerCount\",\"type\":\"uint256\"}],\"name\":\"setMaxStakerCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStakingDuration\",\"type\":\"uint256\"}],\"name\":\"setMinStakingDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"shill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakerAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shilled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MethCookingLab.sol\":\"MethCookingLab\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/MethCookingLab.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract MethCookingLab is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    struct Staker {\\r\\n        uint256 stakedAmount;\\r\\n        uint256 stakingTime;\\r\\n        bool claimed;\\r\\n        bool shilled;\\r\\n    }\\r\\n\\r\\n    IERC20 public token;\\r\\n    IERC20 public wETH;\\r\\n\\r\\n    uint256 public totalStakedAmount;\\r\\n    uint256 public minStakingDuration;\\r\\n    uint256 public minimumShillCount = 3;\\r\\n    uint256 public maxStakerCount = 30;\\r\\n\\r\\n    // Date timestamp when token sale start\\r\\n    uint256 public startTime;\\r\\n    // Date timestamp when token sale ends\\r\\n    uint256 public endTime;\\r\\n    \\r\\n    mapping(address => Staker) public stakers;\\r\\n    address[] public stakerAddresses;\\r\\n\\r\\n    constructor(address _tokenAddress, address _wETHAddress) {\\r\\n        token = IERC20(_tokenAddress);\\r\\n        wETH = IERC20(_wETHAddress);\\r\\n    }\\r\\n\\r\\n    // set duration for min staking\\r\\n    function setMinStakingDuration(uint256 _minStakingDuration) external onlyOwner {  \\r\\n        minStakingDuration = _minStakingDuration;\\r\\n    }\\r\\n\\r\\n    // set number of stakers\\r\\n    function setMaxStakerCount(uint256 _maxStakerCount) external onlyOwner {  \\r\\n        maxStakerCount = _maxStakerCount;\\r\\n    }\\r\\n\\r\\n    // set end time of staking\\r\\n    function setEndTime(uint256 _endTime) external onlyOwner {  \\r\\n        endTime = _endTime;\\r\\n    }\\r\\n\\r\\n    // Stake tokens to Staking Contract\\r\\n    function stake(uint256 _amount) public {\\r\\n        require(stakerAddresses.length < maxStakerCount, \\\"Staking slots are full\\\");\\r\\n        require(_amount >= token.totalSupply().mul(5).div(1000), \\\"Insufficient token balance\\\");\\r\\n        require(block.timestamp < endTime, \\\"Staking duration is ended\\\");\\r\\n        token.safeTransferFrom(address(msg.sender), address(this), _amount);\\r\\n        if(stakers[msg.sender].stakedAmount == 0) {\\r\\n            stakers[msg.sender] = Staker(_amount, block.timestamp, false, false);\\r\\n            stakerAddresses.push(msg.sender);\\r\\n        } else {\\r\\n            stakers[msg.sender] = Staker((stakers[msg.sender].stakedAmount.add(_amount)), block.timestamp, false, false);\\r\\n        }\\r\\n        totalStakedAmount = totalStakedAmount.add(_amount);\\r\\n    }\\r\\n\\r\\n    // unstake wETH from Staking Contract\\r\\n\\r\\n    function unstake() public {\\r\\n        require(stakers[msg.sender].stakedAmount > 0, \\\"No staked amount\\\");\\r\\n        require(block.timestamp >= endTime, \\\"Staking duration is not ended yet.\\\");\\r\\n\\r\\n        token.safeTransfer(address(msg.sender), stakers[msg.sender].stakedAmount);\\r\\n        stakers[msg.sender].stakedAmount = 0;\\r\\n    }\\r\\n\\r\\n    // claim wETH from Staking Contract\\r\\n    function claim() public {\\r\\n        require(stakers[msg.sender].stakedAmount > 0, \\\"No staked amount\\\");\\r\\n        require(!stakers[msg.sender].claimed, \\\"Already claimed\\\");\\r\\n        require(stakers[msg.sender].shilled, \\\"Not enough shilling\\\");\\r\\n        require(block.timestamp >= stakers[msg.sender].stakingTime + minStakingDuration, \\\"Minimum staking duration not reached\\\");\\r\\n        require(block.timestamp >= endTime, \\\"Staking duration is not ended yet.\\\");\\r\\n\\r\\n        uint256 reward = calculateReward(msg.sender);\\r\\n        wETH.safeTransfer(address(msg.sender), reward);\\r\\n        stakers[msg.sender].claimed = true;\\r\\n    }\\r\\n\\r\\n    // calculate the reward amount\\r\\n    function calculateReward(address _staker) internal view returns (uint256) {\\r\\n        uint256 reward = (wETH.balanceOf(address(this)).mul(stakers[_staker].stakedAmount)).div(totalStakedAmount);\\r\\n        return reward;\\r\\n    }\\r\\n\\r\\n    // check if shill to twitter\\r\\n    function shill(address _staker) public {\\r\\n        // require(stakers[_staker].stakedAmount > 0, \\\"No staked amount\\\");\\r\\n        require(!stakers[_staker].shilled, \\\"Already shilled\\\");\\r\\n\\r\\n        stakers[_staker].shilled = true;\\r\\n    }\\r\\n\\r\\n    // Withdraw. EMERGENCY ONLY.\\r\\n\\r\\n    function emergencyWithdraw() external onlyOwner {\\r\\n        // =============================================================================\\r\\n\\r\\n        // This will payout the owner 100% of the contract balance.\\r\\n        // Do not remove this otherwise you will not be able to withdraw the funds.\\r\\n        // =============================================================================\\r\\n        (bool os, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(os);\\r\\n        // =============================================================================\\r\\n    }\\r\\n\\r\\n    function emergencyRewardWithdraw(address _tokenAddr) external onlyOwner {\\r\\n        require(IERC20(_tokenAddr).balanceOf(address(this)) > 0, \\\"Sufficient Token balance\\\");\\r\\n        \\r\\n        IERC20(_tokenAddr).safeTransfer(address(msg.sender), IERC20(_tokenAddr).balanceOf(address(this)));\\r\\n    }\\r\\n}\",\"keccak256\":\"0x8f31d9339f05197b7611c858bba1fe99a4514e28ce3d69541a6fe2b27af5c646\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526003600555601e60065534801561001a57600080fd5b506040516200144c3803806200144c83398101604081905261003b916100e1565b61004433610075565b600180546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055610114565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100dc57600080fd5b919050565b600080604083850312156100f457600080fd5b6100fd836100c5565b915061010b602084016100c5565b90509250929050565b61132880620001246000396000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c80638da5cb5b116100d8578063db2e21bc1161008c578063f242862111610066578063f242862114610303578063f2fde38b14610316578063fc0c546a1461032957600080fd5b8063db2e21bc146102e9578063ddf2308e146102f1578063e25520b9146102fa57600080fd5b8063a694fc3a116100bd578063a694fc3a146102b0578063aa204e9e146102c3578063ccb98ffc146102d657600080fd5b80638da5cb5b1461023c5780639168ae721461024d57600080fd5b80634e71d92d1161013a57806378e979251161011457806378e979251461020d57806385db0dce146102165780638a2ff9a21461022957600080fd5b80634e71d92d146101f4578063567e98f9146101fc578063715018a61461020557600080fd5b80632def66201161016b5780632def6620146101b85780633197cbb6146101c0578063459598a2146101c957600080fd5b806308ae7e5414610187578063289b4d46146101a3575b600080fd5b61019060045481565b6040519081526020015b60405180910390f35b6101b66101b13660046111a0565b61033c565b005b6101b6610349565b61019060085481565b6101dc6101d73660046111a0565b610441565b6040516001600160a01b03909116815260200161019a565b6101b661046b565b61019060035481565b6101b66106c7565b61019060075481565b6101b66102243660046111b9565b6106db565b6101b66102373660046111a0565b610775565b6000546001600160a01b03166101dc565b61028861025b3660046111b9565b60096020526000908152604090208054600182015460029092015490919060ff8082169161010090041684565b604080519485526020850193909352901515918301919091521515606082015260800161019a565b6101b66102be3660046111a0565b610782565b6101b66102d13660046111b9565b610a8f565b6101b66102e43660046111a0565b610bd1565b6101b6610bde565b61019060065481565b61019060055481565b6002546101dc906001600160a01b031681565b6101b66103243660046111b9565b610c3b565b6001546101dc906001600160a01b031681565b610344610cc8565b600655565b336000908152600960205260409020546103aa5760405162461bcd60e51b815260206004820152601060248201527f4e6f207374616b656420616d6f756e740000000000000000000000000000000060448201526064015b60405180910390fd5b6008544210156104075760405162461bcd60e51b815260206004820152602260248201527f5374616b696e67206475726174696f6e206973206e6f7420656e6465642079656044820152613a1760f11b60648201526084016103a1565b3360008181526009602052604090205460015461042f926001600160a01b0390911691610d22565b33600090815260096020526040812055565b600a818154811061045157600080fd5b6000918252602090912001546001600160a01b0316905081565b336000908152600960205260409020546104c75760405162461bcd60e51b815260206004820152601060248201527f4e6f207374616b656420616d6f756e740000000000000000000000000000000060448201526064016103a1565b3360009081526009602052604090206002015460ff161561052a5760405162461bcd60e51b815260206004820152600f60248201527f416c726561647920636c61696d6564000000000000000000000000000000000060448201526064016103a1565b33600090815260096020526040902060020154610100900460ff166105915760405162461bcd60e51b815260206004820152601360248201527f4e6f7420656e6f756768207368696c6c696e670000000000000000000000000060448201526064016103a1565b600454336000908152600960205260409020600101546105b191906111f8565b4210156106255760405162461bcd60e51b8152602060048201526024808201527f4d696e696d756d207374616b696e67206475726174696f6e206e6f742072656160448201527f636865640000000000000000000000000000000000000000000000000000000060648201526084016103a1565b6008544210156106825760405162461bcd60e51b815260206004820152602260248201527f5374616b696e67206475726174696f6e206973206e6f7420656e6465642079656044820152613a1760f11b60648201526084016103a1565b600061068d33610dd0565b6002549091506106a7906001600160a01b03163383610d22565b50336000908152600960205260409020600201805460ff19166001179055565b6106cf610cc8565b6106d96000610e42565b565b6001600160a01b038116600090815260096020526040902060020154610100900460ff161561074c5760405162461bcd60e51b815260206004820152600f60248201527f416c7265616479207368696c6c6564000000000000000000000000000000000060448201526064016103a1565b6001600160a01b03166000908152600960205260409020600201805461ff001916610100179055565b61077d610cc8565b600455565b600654600a54106107d55760405162461bcd60e51b815260206004820152601660248201527f5374616b696e6720736c6f7473206172652066756c6c0000000000000000000060448201526064016103a1565b6108636103e861085d6005600160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610833573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610857919061120b565b90610e9f565b90610eb4565b8110156108b25760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e636500000000000060448201526064016103a1565b60085442106109035760405162461bcd60e51b815260206004820152601960248201527f5374616b696e67206475726174696f6e20697320656e6465640000000000000060448201526064016103a1565b60015461091b906001600160a01b0316333084610ec0565b3360009081526009602052604081205490036109f05760408051608081018252828152426020808301918252600083850181815260608501828152338084526009909452958220945185559251600185810191909155925160029094018054955115156101000261ff00199515159590951661ffff199096169590951793909317909355600a805491820181559091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801805473ffffffffffffffffffffffffffffffffffffffff19169091179055610a7c565b60408051608081018252336000908152600960205291909120548190610a169084610f17565b81524260208083019190915260006040808401829052606093840182905233825260098352908190208451815591840151600183015583015160029091018054939092015161ffff1990931690151561ff00191617610100921515929092029190911790555b600354610a899082610f17565b60035550565b610a97610cc8565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610ade573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b02919061120b565b11610b4f5760405162461bcd60e51b815260206004820152601860248201527f53756666696369656e7420546f6b656e2062616c616e6365000000000000000060448201526064016103a1565b6040516370a0823160e01b8152306004820152610bce9033906001600160a01b038416906370a0823190602401602060405180830381865afa158015610b99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbd919061120b565b6001600160a01b0384169190610d22565b50565b610bd9610cc8565b600855565b610be6610cc8565b604051600090339047908381818185875af1925050503d8060008114610c28576040519150601f19603f3d011682016040523d82523d6000602084013e610c2d565b606091505b5050905080610bce57600080fd5b610c43610cc8565b6001600160a01b038116610cbf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103a1565b610bce81610e42565b6000546001600160a01b031633146106d95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103a1565b6040516001600160a01b038316602482015260448101829052610dcb9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610f23565b505050565b6003546001600160a01b038281166000908152600960205260408082205460025491516370a0823160e01b815230600482015292948594610e3b94919361085d93929116906370a0823190602401602060405180830381865afa158015610833573d6000803e3d6000fd5b9392505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610eab8284611224565b90505b92915050565b6000610eab828461123b565b6040516001600160a01b0380851660248301528316604482015260648101829052610f119085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610d67565b50505050565b6000610eab82846111f8565b6000610f78826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166110089092919063ffffffff16565b805190915015610dcb5780806020019051810190610f96919061125d565b610dcb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016103a1565b6060611017848460008561101f565b949350505050565b6060824710156110975760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016103a1565b6001600160a01b0385163b6110ee5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103a1565b600080866001600160a01b0316858760405161110a91906112a3565b60006040518083038185875af1925050503d8060008114611147576040519150601f19603f3d011682016040523d82523d6000602084013e61114c565b606091505b509150915061115c828286611167565b979650505050505050565b60608315611176575081610e3b565b8251156111865782518084602001fd5b8160405162461bcd60e51b81526004016103a191906112bf565b6000602082840312156111b257600080fd5b5035919050565b6000602082840312156111cb57600080fd5b81356001600160a01b0381168114610e3b57600080fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610eae57610eae6111e2565b60006020828403121561121d57600080fd5b5051919050565b8082028115828204841417610eae57610eae6111e2565b60008261125857634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561126f57600080fd5b81518015158114610e3b57600080fd5b60005b8381101561129a578181015183820152602001611282565b50506000910152565b600082516112b581846020870161127f565b9190910192915050565b60208152600082518060208401526112de81604085016020870161127f565b601f01601f1916919091016040019291505056fea26469706673582212205b572d425f7345726113f2e8e6e89c9a08590a38fc7429b584327446b226287c64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101825760003560e01c80638da5cb5b116100d8578063db2e21bc1161008c578063f242862111610066578063f242862114610303578063f2fde38b14610316578063fc0c546a1461032957600080fd5b8063db2e21bc146102e9578063ddf2308e146102f1578063e25520b9146102fa57600080fd5b8063a694fc3a116100bd578063a694fc3a146102b0578063aa204e9e146102c3578063ccb98ffc146102d657600080fd5b80638da5cb5b1461023c5780639168ae721461024d57600080fd5b80634e71d92d1161013a57806378e979251161011457806378e979251461020d57806385db0dce146102165780638a2ff9a21461022957600080fd5b80634e71d92d146101f4578063567e98f9146101fc578063715018a61461020557600080fd5b80632def66201161016b5780632def6620146101b85780633197cbb6146101c0578063459598a2146101c957600080fd5b806308ae7e5414610187578063289b4d46146101a3575b600080fd5b61019060045481565b6040519081526020015b60405180910390f35b6101b66101b13660046111a0565b61033c565b005b6101b6610349565b61019060085481565b6101dc6101d73660046111a0565b610441565b6040516001600160a01b03909116815260200161019a565b6101b661046b565b61019060035481565b6101b66106c7565b61019060075481565b6101b66102243660046111b9565b6106db565b6101b66102373660046111a0565b610775565b6000546001600160a01b03166101dc565b61028861025b3660046111b9565b60096020526000908152604090208054600182015460029092015490919060ff8082169161010090041684565b604080519485526020850193909352901515918301919091521515606082015260800161019a565b6101b66102be3660046111a0565b610782565b6101b66102d13660046111b9565b610a8f565b6101b66102e43660046111a0565b610bd1565b6101b6610bde565b61019060065481565b61019060055481565b6002546101dc906001600160a01b031681565b6101b66103243660046111b9565b610c3b565b6001546101dc906001600160a01b031681565b610344610cc8565b600655565b336000908152600960205260409020546103aa5760405162461bcd60e51b815260206004820152601060248201527f4e6f207374616b656420616d6f756e740000000000000000000000000000000060448201526064015b60405180910390fd5b6008544210156104075760405162461bcd60e51b815260206004820152602260248201527f5374616b696e67206475726174696f6e206973206e6f7420656e6465642079656044820152613a1760f11b60648201526084016103a1565b3360008181526009602052604090205460015461042f926001600160a01b0390911691610d22565b33600090815260096020526040812055565b600a818154811061045157600080fd5b6000918252602090912001546001600160a01b0316905081565b336000908152600960205260409020546104c75760405162461bcd60e51b815260206004820152601060248201527f4e6f207374616b656420616d6f756e740000000000000000000000000000000060448201526064016103a1565b3360009081526009602052604090206002015460ff161561052a5760405162461bcd60e51b815260206004820152600f60248201527f416c726561647920636c61696d6564000000000000000000000000000000000060448201526064016103a1565b33600090815260096020526040902060020154610100900460ff166105915760405162461bcd60e51b815260206004820152601360248201527f4e6f7420656e6f756768207368696c6c696e670000000000000000000000000060448201526064016103a1565b600454336000908152600960205260409020600101546105b191906111f8565b4210156106255760405162461bcd60e51b8152602060048201526024808201527f4d696e696d756d207374616b696e67206475726174696f6e206e6f742072656160448201527f636865640000000000000000000000000000000000000000000000000000000060648201526084016103a1565b6008544210156106825760405162461bcd60e51b815260206004820152602260248201527f5374616b696e67206475726174696f6e206973206e6f7420656e6465642079656044820152613a1760f11b60648201526084016103a1565b600061068d33610dd0565b6002549091506106a7906001600160a01b03163383610d22565b50336000908152600960205260409020600201805460ff19166001179055565b6106cf610cc8565b6106d96000610e42565b565b6001600160a01b038116600090815260096020526040902060020154610100900460ff161561074c5760405162461bcd60e51b815260206004820152600f60248201527f416c7265616479207368696c6c6564000000000000000000000000000000000060448201526064016103a1565b6001600160a01b03166000908152600960205260409020600201805461ff001916610100179055565b61077d610cc8565b600455565b600654600a54106107d55760405162461bcd60e51b815260206004820152601660248201527f5374616b696e6720736c6f7473206172652066756c6c0000000000000000000060448201526064016103a1565b6108636103e861085d6005600160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610833573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610857919061120b565b90610e9f565b90610eb4565b8110156108b25760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e636500000000000060448201526064016103a1565b60085442106109035760405162461bcd60e51b815260206004820152601960248201527f5374616b696e67206475726174696f6e20697320656e6465640000000000000060448201526064016103a1565b60015461091b906001600160a01b0316333084610ec0565b3360009081526009602052604081205490036109f05760408051608081018252828152426020808301918252600083850181815260608501828152338084526009909452958220945185559251600185810191909155925160029094018054955115156101000261ff00199515159590951661ffff199096169590951793909317909355600a805491820181559091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801805473ffffffffffffffffffffffffffffffffffffffff19169091179055610a7c565b60408051608081018252336000908152600960205291909120548190610a169084610f17565b81524260208083019190915260006040808401829052606093840182905233825260098352908190208451815591840151600183015583015160029091018054939092015161ffff1990931690151561ff00191617610100921515929092029190911790555b600354610a899082610f17565b60035550565b610a97610cc8565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610ade573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b02919061120b565b11610b4f5760405162461bcd60e51b815260206004820152601860248201527f53756666696369656e7420546f6b656e2062616c616e6365000000000000000060448201526064016103a1565b6040516370a0823160e01b8152306004820152610bce9033906001600160a01b038416906370a0823190602401602060405180830381865afa158015610b99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbd919061120b565b6001600160a01b0384169190610d22565b50565b610bd9610cc8565b600855565b610be6610cc8565b604051600090339047908381818185875af1925050503d8060008114610c28576040519150601f19603f3d011682016040523d82523d6000602084013e610c2d565b606091505b5050905080610bce57600080fd5b610c43610cc8565b6001600160a01b038116610cbf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103a1565b610bce81610e42565b6000546001600160a01b031633146106d95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103a1565b6040516001600160a01b038316602482015260448101829052610dcb9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610f23565b505050565b6003546001600160a01b038281166000908152600960205260408082205460025491516370a0823160e01b815230600482015292948594610e3b94919361085d93929116906370a0823190602401602060405180830381865afa158015610833573d6000803e3d6000fd5b9392505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610eab8284611224565b90505b92915050565b6000610eab828461123b565b6040516001600160a01b0380851660248301528316604482015260648101829052610f119085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610d67565b50505050565b6000610eab82846111f8565b6000610f78826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166110089092919063ffffffff16565b805190915015610dcb5780806020019051810190610f96919061125d565b610dcb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016103a1565b6060611017848460008561101f565b949350505050565b6060824710156110975760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016103a1565b6001600160a01b0385163b6110ee5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103a1565b600080866001600160a01b0316858760405161110a91906112a3565b60006040518083038185875af1925050503d8060008114611147576040519150601f19603f3d011682016040523d82523d6000602084013e61114c565b606091505b509150915061115c828286611167565b979650505050505050565b60608315611176575081610e3b565b8251156111865782518084602001fd5b8160405162461bcd60e51b81526004016103a191906112bf565b6000602082840312156111b257600080fd5b5035919050565b6000602082840312156111cb57600080fd5b81356001600160a01b0381168114610e3b57600080fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610eae57610eae6111e2565b60006020828403121561121d57600080fd5b5051919050565b8082028115828204841417610eae57610eae6111e2565b60008261125857634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561126f57600080fd5b81518015158114610e3b57600080fd5b60005b8381101561129a578181015183820152602001611282565b50506000910152565b600082516112b581846020870161127f565b9190910192915050565b60208152600082518060208401526112de81604085016020870161127f565b601f01601f1916919091016040019291505056fea26469706673582212205b572d425f7345726113f2e8e6e89c9a08590a38fc7429b584327446b226287c64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/MethCookingLab.sol:MethCookingLab",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1207,
        "contract": "contracts/MethCookingLab.sol:MethCookingLab",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)233"
      },
      {
        "astId": 1210,
        "contract": "contracts/MethCookingLab.sol:MethCookingLab",
        "label": "wETH",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)233"
      },
      {
        "astId": 1212,
        "contract": "contracts/MethCookingLab.sol:MethCookingLab",
        "label": "totalStakedAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1214,
        "contract": "contracts/MethCookingLab.sol:MethCookingLab",
        "label": "minStakingDuration",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1217,
        "contract": "contracts/MethCookingLab.sol:MethCookingLab",
        "label": "minimumShillCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1220,
        "contract": "contracts/MethCookingLab.sol:MethCookingLab",
        "label": "maxStakerCount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1222,
        "contract": "contracts/MethCookingLab.sol:MethCookingLab",
        "label": "startTime",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1224,
        "contract": "contracts/MethCookingLab.sol:MethCookingLab",
        "label": "endTime",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1229,
        "contract": "contracts/MethCookingLab.sol:MethCookingLab",
        "label": "stakers",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(Staker)1204_storage)"
      },
      {
        "astId": 1232,
        "contract": "contracts/MethCookingLab.sol:MethCookingLab",
        "label": "stakerAddresses",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)233": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Staker)1204_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MethCookingLab.Staker)",
        "numberOfBytes": "32",
        "value": "t_struct(Staker)1204_storage"
      },
      "t_struct(Staker)1204_storage": {
        "encoding": "inplace",
        "label": "struct MethCookingLab.Staker",
        "members": [
          {
            "astId": 1197,
            "contract": "contracts/MethCookingLab.sol:MethCookingLab",
            "label": "stakedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1199,
            "contract": "contracts/MethCookingLab.sol:MethCookingLab",
            "label": "stakingTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1201,
            "contract": "contracts/MethCookingLab.sol:MethCookingLab",
            "label": "claimed",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 1203,
            "contract": "contracts/MethCookingLab.sol:MethCookingLab",
            "label": "shilled",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}